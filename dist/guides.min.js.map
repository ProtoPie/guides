{"version":3,"file":"guides.min.js","sources":["../src/react-guides/utils.ts","../src/react-guides/consts.ts","../src/react-guides/Guides.tsx","../src/InnerGuides.tsx","../src/index.ts","../src/GuidesManager.tsx"],"sourcesContent":["import { prefixNames } from 'framework-utils';\n\nexport function prefix(...classNames: string[]) {\n    return prefixNames('scena-', ...classNames);\n}\n","import { PROPERTIES as RULER_PROPERTIES } from '@scena/react-ruler';\nimport { prefixCSS } from 'framework-utils';\n\nimport { GuidesOptions } from './types';\nimport { prefix } from './utils';\n\nexport const RULER = prefix('ruler');\nexport const ADDER = prefix('guide', 'adder');\nexport const GUIDES = prefix('guides');\nexport const GUIDE = prefix('guide');\nexport const DRAGGING = prefix('dragging');\nexport const DISPLAY_DRAG = prefix('display-drag');\nexport const GUIDES_CSS = prefixCSS('scena-', `\n{\n    position: relative;\n    width: 100%;\n    height: 100%;\n}\ncanvas {\n    position: relative;\n}\n.guide-origin {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    top: 0;\n    left: 0;\n    opacity: 0;\n}\n.guides {\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    will-change: transform;\n    z-index: 2000;\n}\n.guide-pos {\n    position: absolute;\n    font-weight: bold;\n    font-size: 12px;\n    color: #E04169;\n    width: 50px;\n    text-align: center;\n    backdrop-filter: blur(20px);\n}\n\n.horizontal .guide-pos {\n    bottom: 100%;\n    left: 50%;\n    transform: translate(-50%);\n}\n.vertical .guide-pos {\n    left: calc(100% + 2px);\n    top: 10px;\n    transform: translateY(-50%);\n}\n.display-drag {\n    position: absolute;\n    z-index: 2000;\n    font-weight: bold;\n    font-size: 12px;\n    display: block;\n    color: #E04169;\n    backdrop-filter: blur(20px);\n}\n\n.horizontal .display-drag {\n    bottom: 100%;\n    left: 15px\n    transform: translate(-50%);\n}\n\n.vertical .display-drag {\n    left: calc(100% + 2px);\n    top: 10px;\n    transform: translateY(-50%);\n}\n\n:host.horizontal .guides {\n    width: 100%;\n    height: 0;\n}\n:host.vertical .guides {\n    height: 100%;\n    width: 0;\n}\n.guide {\n    position: absolute;\n    background: #f33;\n    z-index: 2;\n}\n.selected {\n    background: #8169FF;\n}\n.guide.dragging:before {\n    position: absolute;\n    content: \"\";\n    width: 100%;\n    height: 100%;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n}\n:host.horizontal .guide {\n    width: 100%;\n    height: 1px;\n    cursor: row-resize;\n}\n:host.vertical .guide {\n    width: 1px;\n    height: 100%;\n    cursor: col-resize;\n}\n:host.horizontal .dragging,\n:host.horizontal .selected {\n    height: 2px\n}\n:host.vertical .dragging,\n:host.vertical .selected {\n    width: 2px\n}\n.mobile :host.horizontal .guide {\n    transform: scale(1, 2);\n}\n.mobile :host.vertical .guide {\n    transform: scale(2, 1);\n}\n:host.horizontal .guide:before {\n    height: 10px;\n    margin-top: -5px;\n    display: block;\n    content: '';\n}\n:host.vertical .guide:before {\n    width: 10px;\n    height: 100%;\n    margin-left: -5px;\n    display: block;\n    content: '';\n}\n.adder {\n    display: none;\n}\n.adder.dragging {\n    display: block;\n}\n`);\n\nexport const PROPERTIES: Array<keyof GuidesOptions> = [\n    'className',\n    'rulerStyle',\n    'snapThreshold',\n    'snaps',\n    'displayDragPos',\n    'cspNonce',\n    'dragPosFormat',\n    'defaultGuides',\n    'showGuides',\n    ...RULER_PROPERTIES,\n];\n\nexport const METHODS = [\n    'getGuides',\n    'loadGuides',\n    'scroll',\n    'scrollGuides',\n    'resize',\n    'deleteSelectedGuide',\n    'resetSelected',\n    'clearAllGuides',\n] as const;\n\nexport const EVENTS = [\n    'changeGuides',\n    'dragStart',\n    'drag',\n    'dragEnd',\n    'clickRuler',\n    'deleteGuide',\n    'addGuide',\n    'resetGuides',\n] as const;\n","import { addClass, hasClass, removeClass } from '@daybrush/utils';\nimport Ruler, { PROPERTIES as RULER_PROPERTIES, RulerProps } from '@scena/react-ruler';\nimport { calculateMatrixDist,getDistElementMatrix } from 'css-to-mat';\nimport { ref, refs } from 'framework-utils';\nimport Gesto, { OnDragEnd } from 'gesto';\nimport * as React from 'react';\nimport styled, { StyledElement } from 'react-css-styled';\n\nimport { ADDER, DISPLAY_DRAG, DRAGGING, GUIDE, GUIDES, GUIDES_CSS } from './consts';\nimport { GuidesInterface,GuidesProps, GuidesState, OnDragStart } from './types';\nimport { prefix } from './utils';\n\nconst GuidesElement = styled('div', GUIDES_CSS);\n\nexport default class Guides extends React.PureComponent<GuidesProps, GuidesState> implements GuidesInterface {\n    public static defaultProps: GuidesProps = {\n        className: '',\n        type: 'horizontal',\n        zoom: 1,\n        style: {},\n        snapThreshold: 5,\n        snaps: [],\n        digit: 0,\n        onClickRuler: () => { },\n        onAddGuide: () => { },        \n        onDeleteGuide: () => { },\n        onChangeGuides: () => { },\n        onDragStart: () => { },\n        onDrag: () => { },\n        onDragEnd: () => { },\n        displayDragPos: false,\n        dragPosFormat: v => v,\n        defaultGuides: [],\n        lockGuides: false,\n        showGuides: true,\n        guideStyle: {},\n        dragGuideStyle: {},\n        guidePosStyle: {},\n        portalContainer: null,\n    };\n    public state: GuidesState = {\n        guides: [],\n        selectedGuides: [],\n    };\n    public adderElement!: HTMLElement;\n    public scrollPos = 0;\n    public ruler!: Ruler;\n    private manager!: StyledElement<HTMLElement>;\n    private guidesElement!: HTMLElement;\n    private displayElement!: HTMLElement;\n    private originElement!: HTMLElement;\n    private gesto!: Gesto;\n    private guideElements: HTMLElement[] = [];\n    private _isFirstMove = false;\n    private _pointerEventsTimer: NodeJS.Timeout;\n\n    constructor(props: Required<GuidesProps>) {\n        super(props);\n        window.addEventListener('keydown', (e: KeyboardEvent) => {\n            if(e.code === 'Backspace' && this.state.selectedGuides.length) {\n                this.deleteSelectedGuide();\n            }\n        });\n\n        window.addEventListener('click', (e: MouseEvent) => {\n            this.resetSelected();\n            e.stopPropagation();\n        });\n    }\n\n    public disablePointerEventsOnScroll() {\n        if(!this.props?.showGuides) {\n            return;\n        }\n        this._pointerEventsTimer && clearTimeout(this._pointerEventsTimer);\n        this.guidesElement.style.pointerEvents = 'none';\n        this._pointerEventsTimer = setTimeout(() => {\n            this.guidesElement.style.pointerEvents = 'auto';\n        }, 300);\n    }\n\n    public render() {\n        const {\n            className,\n            type,\n            zoom,\n            style,\n            rulerStyle,\n            displayDragPos,\n            cspNonce,\n            dragGuideStyle,\n            portalContainer,\n        } = this.props as Required<GuidesProps>;\n        const props = this.props;\n        const translateName = this.getTranslateName();\n\n        const rulerProps: RulerProps = {};\n\n        RULER_PROPERTIES.forEach(name => {\n            if (name === 'style') {\n                return;\n            }\n            (rulerProps as any)[name] = props[name];\n        });\n        return <GuidesElement\n            ref={ref(this, 'manager')}\n            cspNonce={cspNonce}\n            className={`${prefix('manager', type)} ${className}`}\n            portalContainer={portalContainer}\n            style={style}\n        >\n            <div className={prefix('guide-origin')} ref={ref(this, 'originElement')}></div>\n            <Ruler\n                ref={ref(this, 'ruler')}\n                style={rulerStyle}\n                {...rulerProps}\n            />\n            <div className={GUIDES} ref={ref(this, 'guidesElement')} style={{\n                transform: `${translateName}(${-this.scrollPos * zoom}px)`,\n            }}>\n                {displayDragPos && <div className={DISPLAY_DRAG}\n                    ref={ref(this, 'displayElement')} style={dragGuideStyle} />}\n                <div className={ADDER} ref={ref(this, 'adderElement')} />\n                {this.renderGuides()}\n            </div>\n        </GuidesElement>;\n    }\n\n    private selectGuide(pos: number, e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n        this.setState({\n            selectedGuides: [pos],\n        });\n        e.stopPropagation();\n        e.preventDefault();\n    }\n\n    public renderGuides() {\n        const props = this.props;\n        const {\n            type,\n            zoom,\n            showGuides,\n            guideStyle,\n            displayGuidePos,\n            guidePosStyle = {},\n        } = props as Required<GuidesProps>;\n        const translateName = this.getTranslateName();\n        const guides = this.state.guides;\n        const guidePosFormat = props.guidePosFormat || props.dragPosFormat || (v => v);\n        const selectedGuides = this.state.selectedGuides;\n        this.guideElements = [];\n        if (showGuides) {\n            return guides.map((pos, i) => {\n                return (\n                    <div className={`${prefix('guide', type)} ${selectedGuides.includes(pos) ? prefix('selected') : ''}`}\n                        ref={refs(this, 'guideElements', i)}\n                        key={i}\n                        data-index={i}\n                        data-pos={pos}\n                        onClick={(e) => this.selectGuide(pos, e)}\n                        style={{\n                            ...guideStyle,\n                            transform: `${translateName}(${pos * zoom}px) translateZ(0px)`,\n                        }}>\n                            {displayGuidePos && <div className={prefix('guide-pos')} style={guidePosStyle || {}}>\n                                {guidePosFormat!(pos)}\n                            </div>}\n                        </div>\n                    );\n            });\n        }\n        return;\n    }\n    public componentDidMount() {\n        this.gesto = new Gesto(this.manager.getElement(), {\n            container: document.body,\n        }).on('dragStart', e => {\n            const {\n                type,\n                zoom,\n                lockGuides,\n            } = this.props;\n\n            if (lockGuides === true) {\n                e.stop();\n                return;\n            }\n            const inputEvent = e.inputEvent;\n            const target = inputEvent.target;\n            const datas = e.datas;\n            const canvasElement = this.ruler.canvasElement;\n            const guidesElement = this.guidesElement;\n            const isHorizontal = type === 'horizontal';\n            const originRect = this.originElement.getBoundingClientRect();\n            const matrix = getDistElementMatrix(this.manager.getElement());\n            const offsetPos = calculateMatrixDist(matrix, [\n                e.clientX - originRect.left,\n                e.clientY - originRect.top,\n            ]);\n            offsetPos[0] -= guidesElement.offsetLeft;\n            offsetPos[1] -= guidesElement.offsetTop;\n            offsetPos[isHorizontal ? 1 : 0] += this.scrollPos * zoom!;\n\n            datas.offsetPos = offsetPos;\n            datas.matrix = matrix;\n\n            const isLockAdd = lockGuides && lockGuides.indexOf('add') > -1;\n            const isLockRemove = lockGuides && lockGuides.indexOf('remove') > -1;\n            const isLockChange = lockGuides && lockGuides.indexOf('change') > -1;\n\n            if (target === canvasElement) {\n                if (isLockAdd) {\n                    e.stop();\n                    return;\n                }\n                datas.fromRuler = true;\n                datas.target = this.adderElement;\n                // add\n            } else if (hasClass(target, GUIDE)) {\n                if (isLockRemove && isLockChange) {\n                    e.stop();\n                    return;\n                }\n                datas.target = target;\n                // change\n            } else {\n                e.stop();\n                return false;\n            }\n            this.onDragStart(e as OnDragStart);\n        }).on('drag', this.onDrag).on('dragEnd', this.onDragEnd);\n        // pass array of guides on mount data to create gridlines or something like that in ui\n        this.setState({ guides: this.props.defaultGuides || [] });\n    }\n    public componentWillUnmount() {\n        this.gesto.unset();\n    }\n    public componentDidUpdate(prevProps: any) {\n        if (prevProps.defaultGuides !== this.props.defaultGuides) {\n            // to dynamically update guides from code rather than dragging guidelines\n            this.setState({ guides: this.props.defaultGuides || [] });\n        }\n    }\n    /**\n     * Load the current guidelines.\n     * @memberof Guides\n     * @instance\n     */\n    public loadGuides(guides: number[]) {\n        this.setState({\n            guides,\n        });\n    }\n\n    /**\n     * Delete the selected guideline.\n     * @memberof Guides\n     * @instance\n     */\n    public deleteSelectedGuide() {\n        const guides = this.getGuides();\n        const guidesClone = this.getGuides();\n        const index = guides.findIndex(guide => {\n            if(this.state.selectedGuides.includes(guide)) {\n                return guide;\n            }\n        });\n\n        guides.splice(index, 1);\n        \n        this.setState({\n            guides,\n            selectedGuides: [],\n        });\n        \n        this.props.onDeleteGuide!({\n            deletedPosGuide: guidesClone[index],\n            deletedIndexGuide: index,\n        });\n    }\n\n    /**\n     * Clear all guidelines\n     * @memberof Guides\n     * @instance\n     */\n    public clearAllGuides() {\n        this.setState({\n            guides: [],\n        });\n    }\n\n    /**\n     * Get current guidelines.\n     * @memberof Guides\n     * @instance\n     */\n    public getGuides(): number[] {\n        return this.state.guides;\n    }\n    /**\n     * Scroll the positions of the guidelines opposite the ruler.\n     * @memberof Guides\n     * @instance\n     */\n    public scrollGuides(pos: number, zoom = 1) {\n        const guidesElement = this.guidesElement;\n\n        this.disablePointerEventsOnScroll();\n\n        this.scrollPos = pos;\n        guidesElement.style.transform = `${this.getTranslateName()}(${-pos * zoom}px)`;\n\n        const guides = this.state.guides;\n        this.guideElements.forEach((el, i) => {\n            if (!el) {\n                return;\n            }\n            el.style.display = -pos + guides[i] < 0 ? 'none' : 'block';\n        });\n    }\n    /**\n     * Recalculate the size of the ruler.\n     * @memberof Guides\n     * @instance\n     */\n    public resize() {\n        this.ruler.resize();\n    }\n    /**\n     * Scroll the position of the ruler.\n     * @memberof Guides\n     * @instance\n     */\n    public scroll(pos: number) {\n        this.ruler.scroll(pos);\n    }\n\n    private onDragStart = (e: OnDragStart) => {\n        this.resetSelected();\n        this.props.onDragStart(e);\n        this._isFirstMove = true;\n    }\n\n    private onDrag = (e: any) => { \n        if (this._isFirstMove) {\n            this._isFirstMove = false;\n            addClass(e.datas.target, DRAGGING);\n        }\n        const nextPos = this.movePos(e);\n\n        /**\n         * When dragging, the drag event is called.\n         * @memberof Guides\n         * @event drag\n         * @param {OnDrag} - Parameters for the drag event\n         */\n        this.props.onDrag!({\n            ...e,\n            dragElement: e.datas.target,\n        });\n        return nextPos;\n    }\n    private onDragEnd = (e: OnDragEnd) => {\n        const { datas, isDrag, distX, distY } = e;\n\n        if(!isDrag) {\n            return;\n        }\n\n        const pos = this.movePos(e);\n        let guides = this.state.guides;\n        const { onChangeGuides, onAddGuide, zoom, displayDragPos, digit, lockGuides } = this.props;\n        const guidePos = parseFloat((pos / zoom!).toFixed(digit || 0));\n\n        if (displayDragPos) {\n            // this.displayElement.style.cssText += 'display: none;';\n        }\n\n        removeClass(datas.target, DRAGGING);\n        /**\n         * When the drag finishes, the dragEnd event is called.\n         * @memberof Guides\n         * @event dragEnd\n         * @param {OnDragEnd} - Parameters for the dragEnd event\n         */\n         this.props.onDragEnd!({\n            ...e,\n            dragElement: datas.target,\n        });\n        if (datas.fromRuler) {\n            if (this._isFirstMove) {\n                /**\n                 * When click the ruler, the click ruler is called.\n                 * @memberof Guides\n                 * @event clickRuler\n                 * @param {OnClickRuler} - Parameters for the clickRuler event\n                 */\n                this.props.onClickRuler!({\n                    ...e,\n                    pos: 0,\n                });\n            }\n            if (guidePos >= this.scrollPos && guides.indexOf(guidePos) < 0) {\n                this.setState({\n                    guides: [...guides, guidePos],\n                }, () => {\n                    /**\n                     * The `changeGuides` event occurs when the guideline is added / removed / changed.\n                     * @memberof Guides\n                     * @event changeGuides\n                     * @param {OnChangeGuides} - Parameters for the changeGuides event\n                     */\n                    onChangeGuides!({\n                        guides: this.state.guides,\n                        distX,\n                        distY,\n                        isAdd: true,\n                        isRemove: false,\n                        isChange: false,\n                    });\n\n                    onAddGuide!({\n                        posNewGuide: guidePos,\n                    });\n                });\n            }\n        } else {\n            const index = datas.target.getAttribute('data-index');\n            let isRemove = false;\n            let isChange = false;\n\n            guides = [...guides];\n\n            if (guidePos < this.scrollPos) {\n                if (lockGuides && (lockGuides === true || lockGuides.indexOf('remove') > -1)) {\n                    return;\n                }\n                const deletedPosGuide = guides[index];\n                guides.splice(index, 1);\n                this.props.onDeleteGuide!({\n                    deletedIndexGuide: index,\n                    deletedPosGuide,\n                });\n                isRemove = true;\n            } else if (guides.indexOf(guidePos) > -1) {\n                return;\n            } else {\n                if (lockGuides && (lockGuides === true || lockGuides.indexOf('change') > -1)) {\n                    return;\n                }\n                guides[index] = guidePos;\n                isChange = true;\n            }\n            this.setState({\n                guides,\n            }, () => {\n                const nextGuides = this.state.guides;\n                onChangeGuides!({\n                    distX,\n                    distY,\n                    guides: nextGuides,\n                    isAdd: false,\n                    isChange,\n                    isRemove,\n                });\n            });\n        }\n    }\n    private movePos(e: any) {\n        const { datas, distX, distY } = e;\n        const props = this.props;\n        const {\n            type, zoom, snaps, snapThreshold,\n            displayDragPos,\n            digit,\n        } = props;\n        const dragPosFormat = props.dragPosFormat || (v => v);\n        const isHorizontal = type === 'horizontal';\n        const matrixPos = calculateMatrixDist(datas.matrix, [distX, distY]);\n        const offsetPos = datas.offsetPos;\n        const offsetX = matrixPos[0] + offsetPos[0];\n        const offsetY = matrixPos[1] + offsetPos[1];\n        let nextPos = Math.round(isHorizontal ? offsetY : offsetX);\n        let guidePos = parseFloat((nextPos / zoom!).toFixed(digit || 0));\n        const guideSnaps = snaps!.slice().sort((a, b) => {\n            return Math.abs(guidePos - a) - Math.abs(guidePos - b);\n        });\n\n        if (guideSnaps.length && Math.abs(guideSnaps[0] * zoom! - nextPos) < snapThreshold!) {\n            guidePos = guideSnaps[0];\n            nextPos = guidePos * zoom!;\n        }\n        if (!datas.fromRuler || !this._isFirstMove) {\n            if (displayDragPos) {\n                const displayPos = type === 'horizontal'\n                ? [offsetX, nextPos]\n                : [nextPos, offsetY];\n                const transform = type === 'horizontal' \n                    ? `translate(${displayPos.map((v, i) => !i ? '-4px' : `${v - 13}px` ).join(', ')}) rotate(-90deg)` \n                    : `translate(${displayPos.map((v, i) => !i ? `${v + 16}px` : '9px' ).join(', ')})`;\n                this.displayElement.style.cssText += 'display: block;'\n                    + 'transform: translate(-50%, -50%) '\n                    + transform;\n                this.displayElement.innerHTML = `${dragPosFormat!(guidePos)}`;\n            }\n            const target = datas.target;\n\n            target.setAttribute('data-pos', guidePos);\n            target.style.transform = `${this.getTranslateName()}(${nextPos}px)`;\n        }\n\n        return nextPos;\n\n    }\n    private getTranslateName() {\n        return this.props.type === 'horizontal' ? 'translateY' : 'translateX';\n    }\n\n    public resetSelected() {\n        this.setState({\n            selectedGuides:[],\n        });\n    }\n}\n","import { ref } from 'framework-utils';\nimport * as React from 'react';\nimport { createPortal } from 'react-dom';\n\nimport ReactGuides from './react-guides';\nimport { GuidesOptions } from './react-guides/types';\n\nexport interface InnerGuidesProps extends GuidesOptions {\n    container?: HTMLElement;\n}\nexport default class InnerGuides extends React.Component<InnerGuidesProps, InnerGuidesProps> {\n    public state: InnerGuidesProps = {};\n    public guides: ReactGuides;\n    constructor(props: InnerGuidesProps) {\n        super(props);\n        this.state = { ...props };\n    }\n    public render() {\n        const { container, ...state } = this.state;\n        return createPortal(<ReactGuides ref={ref(this, 'guides')} {...state} />, container);\n    }\n}\n","import GuidesManager from './GuidesManager';\n\nexport * from './react-guides/types';\nexport default class Guides extends GuidesManager {}\n\n","import { camelize } from '@daybrush/utils';\nimport EventEmitter from '@scena/event-emitter';\nimport { Properties,ref } from 'framework-utils';\nimport * as React from 'react';\nimport { render } from 'react-dom';\n\nimport InnerGuides from './InnerGuides';\nimport { EVENTS,METHODS, PROPERTIES } from './react-guides/consts';\nimport { GuidesEvents, GuidesInterface, GuidesOptions } from './react-guides/types';\n\n@Properties(METHODS as any, (prototype, property) => {\n    if (prototype[property]) {\n        return;\n    }\n    prototype[property] = function(...args) {\n        const self = this.getInnerGuides();\n\n        if (!self || !self[property]) {\n            return;\n        }\n        return self[property](...args);\n    };\n})\n@Properties(PROPERTIES, (prototype, property) => {\n    Object.defineProperty(prototype, property, {\n        get() {\n            return this.getInnerGuides().props[property];\n        },\n        set(value) {\n            this.innerGuides.setState({\n                [property]: value,\n            });\n        },\n        enumerable: true,\n        configurable: true,\n    });\n})\n/**\n * @sort 1\n * @extends EventEmitter\n */\nclass Guides extends EventEmitter<GuidesEvents> {\n    private tempElement = document.createElement('div');\n    private innerGuides!: InnerGuides;\n    /**\n     * @sort 1\n     * @param - guides' container\n     * @param {$ts:Partial<Guides.GuidesOptions>} - guides' options\n     */\n    constructor(container: HTMLElement, options: Partial<GuidesOptions> = {}) {\n        super();\n        const events: any = {};\n\n        EVENTS.forEach(name => {\n            events[camelize(`on ${name}`)] = (e: any) => this.trigger(name as any, e);\n        });\n\n        render(\n            <InnerGuides  {...options} {...events} container={container} ref={ref(this, 'innerGuides')} />,\n            this.tempElement,\n        );\n    }\n    /**\n     * @param state\n     * @param callback\n     */\n    public setState(state: Partial<GuidesOptions>, callback?: () => void) {\n        this.innerGuides.setState(state, callback);\n    }\n    /**\n     * destroy guides\n     */\n    public destroy() {\n        render(null, this.tempElement);\n        this.tempElement = null;\n        this.innerGuides = null;\n    }\n    private getInnerGuides() {\n        return this.innerGuides.guides;\n    }\n}\ninterface Guides extends GuidesInterface {}\n\nexport default Guides;\n"],"names":["prefix","_i","classNames","ADDER","GUIDES","GUIDE","DRAGGING","DISPLAY_DRAG","GUIDES_CSS","PROPERTIES","RULER_PROPERTIES","METHODS","EVENTS","GuidesElement","props","_super","_this","guides","selectedGuides","e","resetSelected","onDragStart","_isFirstMove","datas","target","nextPos","movePos","onDrag","dragElement","isDrag","distX","distY","pos","state","_a","onChangeGuides","onAddGuide","zoom","digit","lockGuides","guidePos","parseFloat","toFixed","onDragEnd","fromRuler","onClickRuler","scrollPos","indexOf","setState","isAdd","isRemove","isChange","posNewGuide","index","getAttribute","isRemove_1","isChange_1","deletedPosGuide","splice","onDeleteGuide","deletedIndexGuide","nextGuides","window","addEventListener","code","length","deleteSelectedGuide","stopPropagation","__extends","this","showGuides","_pointerEventsTimer","clearTimeout","guidesElement","style","pointerEvents","setTimeout","className","type","rulerStyle","displayDragPos","cspNonce","dragGuideStyle","portalContainer","translateName","getTranslateName","rulerProps","forEach","name","React","ref","Ruler","transform","renderGuides","preventDefault","guideStyle","displayGuidePos","_b","guidePosStyle","guidePosFormat","dragPosFormat","v","guideElements","map","i","includes","key","onClick","selectGuide","gesto","Gesto","manager","getElement","container","document","body","on","stop","inputEvent","canvasElement","ruler","isHorizontal","originRect","originElement","getBoundingClientRect","matrix","getDistElementMatrix","offsetPos","calculateMatrixDist","clientX","left","clientY","top","isLockAdd","offsetLeft","offsetTop","isLockRemove","isLockChange","adderElement","defaultGuides","unset","prevProps","getGuides","guidesClone","findIndex","guide","disablePointerEventsOnScroll","el","display","resize","scroll","snaps","snapThreshold","matrixPos","offsetX","offsetY","Math","round","guideSnaps","slice","sort","a","b","abs","displayPos","join","displayElement","cssText","innerHTML","setAttribute","Guides","ReactGuides","options","events","createElement","trigger","render","InnerGuides","tempElement","callback","innerGuides","Properties","prototype","property","args","self","getInnerGuides","Object","defineProperty","get","set","value","enumerable","configurable","EventEmitter"],"mappings":"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"}