{"version":3,"file":"guides.min.js","sources":["../src/react-guides/utils.ts","../src/react-guides/consts.ts","../src/react-guides/Guides.tsx","../src/InnerGuides.tsx","../src/index.ts","../src/GuidesManager.tsx"],"sourcesContent":["import { prefixNames } from 'framework-utils';\n\nexport function prefix(...classNames: string[]) {\n    return prefixNames('scena-', ...classNames);\n}\n","import { PROPERTIES as RULER_PROPERTIES } from '@scena/react-ruler';\nimport { prefixCSS } from 'framework-utils';\n\nimport { GuidesOptions } from './types';\nimport { prefix } from './utils';\n\nexport const RULER = prefix('ruler');\nexport const ADDER = prefix('guide', 'adder');\nexport const GUIDES = prefix('guides');\nexport const GUIDE = prefix('guide');\nexport const DRAGGING = prefix('dragging');\nexport const DISPLAY_DRAG = prefix('display-drag');\nexport const GUIDES_CSS = prefixCSS('scena-', `\n{\n    position: relative;\n    width: 100%;\n    height: 100%;\n}\ncanvas {\n    position: relative;\n}\n.guide-origin {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    top: 0;\n    left: 0;\n    opacity: 0;\n}\n.guides {\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    will-change: transform;\n    z-index: 2000;\n}\n.guide-pos {\n    position: absolute;\n    font-weight: bold;\n    font-size: 12px;\n    color: #f33;\n}\n.horizontal .guide-pos {\n    bottom: 100%;\n    left: 50%;\n    transform: translate(-50%);\n}\n.vertical .guide-pos {\n    left: calc(100% + 2px);\n    top: 50%;\n    transform: translateY(-50%);\n}\n.display-drag {\n    position: absolute;\n    will-change: transform;\n    z-index: 2000;\n    font-weight: bold;\n    font-size: 12px;\n    display: none;\n    left: 20px;\n    top: -20px;\n    color: #f33;\n}\n:host.horizontal .guides {\n    width: 100%;\n    height: 0;\n}\n:host.vertical .guides {\n    height: 100%;\n    width: 0;\n}\n.guide {\n    position: absolute;\n    background: #f33;\n    z-index: 2;\n}\n.selected {\n    background: #8169FF;\n}\n.guide.dragging:before {\n    position: absolute;\n    content: \"\";\n    width: 100%;\n    height: 100%;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n}\n:host.horizontal .guide {\n    width: 100%;\n    height: 1px;\n    cursor: row-resize;\n}\n:host.vertical .guide {\n    width: 1px;\n    height: 100%;\n    cursor: col-resize;\n}\n:host.horizontal .dragging,\n:host.horizontal .selected {\n    height: 2px\n}\n:host.vertical .dragging,\n:host.vertical .selected {\n    width: 2px\n}\n.mobile :host.horizontal .guide {\n    transform: scale(1, 2);\n}\n.mobile :host.vertical .guide {\n    transform: scale(2, 1);\n}\n:host.horizontal .guide:before {\n    height: 20px;\n}\n:host.vertical .guide:before {\n    width: 20px;\n}\n.adder {\n    display: none;\n}\n.adder.dragging {\n    display: block;\n}\n`);\n\nexport const PROPERTIES: Array<keyof GuidesOptions> = [\n    'className',\n    'rulerStyle',\n    'snapThreshold',\n    'snaps',\n    'displayDragPos',\n    'cspNonce',\n    'dragPosFormat',\n    'defaultGuides',\n    'showGuides',\n    ...RULER_PROPERTIES,\n];\n\nexport const METHODS = [\n    'getGuides',\n    'loadGuides',\n    'scroll',\n    'scrollGuides',\n    'resize',\n    'deleteSelectedGuide',\n    'resetSelected',\n    'clearAllGuides',\n] as const;\n\nexport const EVENTS = [\n    'changeGuides',\n    'dragStart',\n    'drag',\n    'dragEnd',\n    'clickRuler',\n    'deleteGuide',\n    'addGuide',\n    'resetGuides',\n] as const;\n","import { addClass, hasClass, removeClass } from '@daybrush/utils';\nimport Ruler, { PROPERTIES as RULER_PROPERTIES, RulerProps } from '@scena/react-ruler';\nimport { calculateMatrixDist,getDistElementMatrix } from 'css-to-mat';\nimport { ref, refs } from 'framework-utils';\nimport Gesto, { OnDragEnd } from 'gesto';\nimport * as React from 'react';\nimport styled, { StyledElement } from 'react-css-styled';\n\nimport { ADDER, DISPLAY_DRAG, DRAGGING, GUIDE, GUIDES, GUIDES_CSS } from './consts';\nimport { GuidesInterface,GuidesProps, GuidesState } from './types';\nimport { prefix } from './utils';\n\nconst GuidesElement = styled('div', GUIDES_CSS);\n\nexport default class Guides extends React.PureComponent<GuidesProps, GuidesState> implements GuidesInterface {\n    public static defaultProps: GuidesProps = {\n        className: '',\n        type: 'horizontal',\n        zoom: 1,\n        style: {},\n        snapThreshold: 5,\n        snaps: [],\n        digit: 0,\n        onClickRuler: () => { },\n        onAddGuide: () => { },        \n        onDeleteGuide: () => { },\n        onChangeGuides: () => { },\n        onDragStart: () => { },\n        onResetGuides: () => {},\n        onDrag: () => { },\n        onDragEnd: () => { },\n        displayDragPos: false,\n        dragPosFormat: v => v,\n        defaultGuides: [],\n        lockGuides: false,\n        showGuides: true,\n        guideStyle: {},\n        dragGuideStyle: {},\n        guidePosStyle: {},\n        portalContainer: null,\n    };\n    public state: GuidesState = {\n        guides: [],\n        selectedGuides: [],\n    };\n    public adderElement!: HTMLElement;\n    public scrollPos = 0;\n    public ruler!: Ruler;\n    private manager!: StyledElement<HTMLElement>;\n    private guidesElement!: HTMLElement;\n    private displayElement!: HTMLElement;\n    private originElement!: HTMLElement;\n    private gesto!: Gesto;\n    private guideElements: HTMLElement[] = [];\n    private _isFirstMove = false;\n\n    constructor(props: Required<GuidesProps>) {\n        super(props);\n        window.addEventListener('keydown', (e: KeyboardEvent) => {\n            if(e.code === 'Backspace' && this.state.selectedGuides.length) {\n                this.deleteSelectedGuide();\n            }\n        });\n\n        window.addEventListener('click', (e: MouseEvent) => {\n            this.resetSelected();\n            e.stopPropagation();\n        });\n    }\n    public render() {\n        const {\n            className,\n            type,\n            zoom,\n            style,\n            rulerStyle,\n            displayDragPos,\n            cspNonce,\n            dragGuideStyle,\n            portalContainer,\n        } = this.props as Required<GuidesProps>;\n        const props = this.props;\n        const translateName = this.getTranslateName();\n\n        const rulerProps: RulerProps = {};\n\n        RULER_PROPERTIES.forEach(name => {\n            if (name === 'style') {\n                return;\n            }\n            (rulerProps as any)[name] = props[name];\n        });\n        return <GuidesElement\n            ref={ref(this, 'manager')}\n            cspNonce={cspNonce}\n            className={`${prefix('manager', type)} ${className}`}\n            portalContainer={portalContainer}\n            style={style}\n        >\n            <div className={prefix('guide-origin')} ref={ref(this, 'originElement')}></div>\n            <Ruler\n                ref={ref(this, 'ruler')}\n                style={rulerStyle}\n                {...rulerProps}\n            />\n            <div className={GUIDES} ref={ref(this, 'guidesElement')} style={{\n                transform: `${translateName}(${-this.scrollPos * zoom}px)`,\n            }}>\n                {displayDragPos && <div className={DISPLAY_DRAG}\n                    ref={ref(this, 'displayElement')} style={dragGuideStyle} />}\n                <div className={ADDER} ref={ref(this, 'adderElement')} />\n                {this.renderGuides()}\n            </div>\n        </GuidesElement>;\n    }\n\n    private selectGuide(pos: number, e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n        this.setState({\n            selectedGuides: [pos],\n        });\n        this.props.onResetGuides!({\n            type: this.props.type,\n        })\n        e.stopPropagation();\n        e.preventDefault();\n    }\n\n    public renderGuides() {\n        const props = this.props;\n        const {\n            type,\n            zoom,\n            showGuides,\n            guideStyle,\n            displayGuidePos,\n            guidePosStyle = {},\n        } = props as Required<GuidesProps>;\n        const translateName = this.getTranslateName();\n        const guides = this.state.guides;\n        const guidePosFormat = props.guidePosFormat || props.dragPosFormat || (v => v);\n        const selectedGuides = this.state.selectedGuides;\n        this.guideElements = [];\n        if (showGuides) {\n            return guides.map((pos, i) => {\n                return (\n                    <div className={`${prefix('guide', type)} ${selectedGuides.includes(pos) ? prefix('selected') : ''}`}\n                        ref={refs(this, 'guideElements', i)}\n                        key={i}\n                        data-index={i}\n                        data-pos={pos}\n                        onClick={(e) => this.selectGuide(pos, e)}\n                        style={{\n                            ...guideStyle,\n                            transform: `${translateName}(${pos * zoom}px) translateZ(0px)`,\n                        }}>\n                            {displayGuidePos && <div className={prefix('guide-pos')} style={guidePosStyle || {}}>\n                                {guidePosFormat!(pos)}\n                            </div>}\n                        </div>\n                    );\n            });\n        }\n        return;\n    }\n    public componentDidMount() {\n        this.gesto = new Gesto(this.manager.getElement(), {\n            container: document.body,\n        }).on('dragStart', e => {\n            const {\n                type,\n                zoom,\n                lockGuides,\n            } = this.props;\n\n            if (lockGuides === true) {\n                e.stop();\n                return;\n            }\n            const inputEvent = e.inputEvent;\n            const target = inputEvent.target;\n            const datas = e.datas;\n            const canvasElement = this.ruler.canvasElement;\n            const guidesElement = this.guidesElement;\n            const isHorizontal = type === 'horizontal';\n            const originRect = this.originElement.getBoundingClientRect();\n            const matrix = getDistElementMatrix(this.manager.getElement());\n            const offsetPos = calculateMatrixDist(matrix, [\n                e.clientX - originRect.left,\n                e.clientY - originRect.top,\n            ]);\n            offsetPos[0] -= guidesElement.offsetLeft;\n            offsetPos[1] -= guidesElement.offsetTop;\n            offsetPos[isHorizontal ? 1 : 0] += this.scrollPos * zoom!;\n\n            datas.offsetPos = offsetPos;\n            datas.matrix = matrix;\n\n            const isLockAdd = lockGuides && lockGuides.indexOf('add') > -1;\n            const isLockRemove = lockGuides && lockGuides.indexOf('remove') > -1;\n            const isLockChange = lockGuides && lockGuides.indexOf('change') > -1;\n\n            if (target === canvasElement) {\n                if (isLockAdd) {\n                    e.stop();\n                    return;\n                }\n                datas.fromRuler = true;\n                datas.target = this.adderElement;\n                // add\n            } else if (hasClass(target, GUIDE)) {\n                if (isLockRemove && isLockChange) {\n                    e.stop();\n                    return;\n                }\n                datas.target = target;\n                // change\n            } else {\n                e.stop();\n                return false;\n            }\n            this.onDragStart(e);\n        }).on('drag', this.onDrag).on('dragEnd', this.onDragEnd);\n        // pass array of guides on mount data to create gridlines or something like that in ui\n        this.setState({ guides: this.props.defaultGuides || [] });\n    }\n    public componentWillUnmount() {\n        this.gesto.unset();\n    }\n    public componentDidUpdate(prevProps: any) {\n        if (prevProps.defaultGuides !== this.props.defaultGuides) {\n            // to dynamically update guides from code rather than dragging guidelines\n            this.setState({ guides: this.props.defaultGuides || [] });\n        }\n    }\n    /**\n     * Load the current guidelines.\n     * @memberof Guides\n     * @instance\n     */\n    public loadGuides(guides: number[]) {\n        this.setState({\n            guides,\n        });\n    }\n\n    /**\n     * Delete the selected guideline.\n     * @memberof Guides\n     * @instance\n     */\n    public deleteSelectedGuide() {\n        const guides = this.getGuides();\n        const index = guides.findIndex(guide => {\n            if(this.state.selectedGuides.includes(guide)) {\n                return guide;\n            }\n        });\n        \n        this.props.onDeleteGuide!({\n            deletedPosGuide: guides[index],\n            deletedIndexGuide: index,\n        });\n        \n        guides.splice(index, 1);\n        this.setState({\n            guides,\n            selectedGuides: [],\n        });\n    }\n\n    /**\n     * Clear all guidelines\n     * @memberof Guides\n     * @instance\n     */\n    public clearAllGuides() {\n        this.setState({\n            guides: [],\n        });\n    }\n\n    /**\n     * Get current guidelines.\n     * @memberof Guides\n     * @instance\n     */\n    public getGuides(): number[] {\n        return this.state.guides;\n    }\n    /**\n     * Scroll the positions of the guidelines opposite the ruler.\n     * @memberof Guides\n     * @instance\n     */\n    public scrollGuides(pos: number) {\n        const { zoom } = this.props as Required<GuidesProps>;\n        const guidesElement = this.guidesElement;\n\n        this.scrollPos = pos;\n        guidesElement.style.transform = `${this.getTranslateName()}(${-pos * zoom}px)`;\n\n        const guides = this.state.guides\n        \n        this.guideElements.forEach((el, i) => {\n            if (!el) {\n                return;\n            }\n            el.style.display = -pos + guides[i] < 0 ? 'none' : 'block';\n        });\n    }\n    /**\n     * Recalculate the size of the ruler.\n     * @memberof Guides\n     * @instance\n     */\n    public resize() {\n        this.ruler.resize();\n    }\n    /**\n     * Scroll the position of the ruler.\n     * @memberof Guides\n     * @instance\n     */\n    public scroll(pos: number) {\n        this.ruler.scroll(pos);\n    }\n    private onDragStart = (e: any) => {\n        const { datas, inputEvent } = e;\n\n        this._isFirstMove = true;\n        this.movePos(e);\n\n        /**\n         * When the drag starts, the dragStart event is called.\n         * @memberof Guides\n         * @event dragStart\n         * @param {OnDragStart} - Parameters for the dragStart event\n         */\n        this.props.onDragStart!({\n            ...e,\n            dragElement: datas.target,\n        });\n        inputEvent.stopPropagation();\n        inputEvent.preventDefault();\n    }\n    private onDrag = (e: any) => {\n        if (this._isFirstMove) {\n            this._isFirstMove = false;\n            addClass(e.datas.target, DRAGGING);\n        }\n        const nextPos = this.movePos(e);\n\n        /**\n         * When dragging, the drag event is called.\n         * @memberof Guides\n         * @event drag\n         * @param {OnDrag} - Parameters for the drag event\n         */\n        this.props.onDrag!({\n            ...e,\n            dragElement: e.datas.target,\n        });\n        return nextPos;\n    }\n    private onDragEnd = (e: OnDragEnd) => {\n        const { datas, distX, distY } = e;\n        const pos = this.movePos(e);\n        let guides = this.state.guides;\n        const { onChangeGuides, onAddGuide, zoom, displayDragPos, digit, lockGuides } = this.props;\n        const guidePos = parseFloat((pos / zoom!).toFixed(digit || 0));\n\n        if (displayDragPos) {\n            this.displayElement.style.cssText += 'display: none;';\n        }\n        removeClass(datas.target, DRAGGING);\n        /**\n         * When the drag finishes, the dragEnd event is called.\n         * @memberof Guides\n         * @event dragEnd\n         * @param {OnDragEnd} - Parameters for the dragEnd event\n         */\n        this.props.onDragEnd!({\n            ...e,\n            dragElement: datas.target,\n        });\n        if (datas.fromRuler) {\n            if (this._isFirstMove) {\n                /**\n                 * When click the ruler, the click ruler is called.\n                 * @memberof Guides\n                 * @event clickRuler\n                 * @param {OnClickRuler} - Parameters for the clickRuler event\n                 */\n                this.props.onClickRuler!({\n                    ...e,\n                    pos: 0,\n                });\n            }\n            if (guidePos >= this.scrollPos && guides.indexOf(guidePos) < 0) {\n                this.setState({\n                    guides: [...guides, guidePos],\n                }, () => {\n                    /**\n                     * The `changeGuides` event occurs when the guideline is added / removed / changed.\n                     * @memberof Guides\n                     * @event changeGuides\n                     * @param {OnChangeGuides} - Parameters for the changeGuides event\n                     */\n                    onChangeGuides!({\n                        guides: this.state.guides,\n                        distX,\n                        distY,\n                        isAdd: true,\n                        isRemove: false,\n                        isChange: false,\n                    });\n\n                    onAddGuide!({\n                        posNewGuide: guidePos,\n                    });\n                });\n            }\n        } else {\n            const index = datas.target.getAttribute('data-index');\n            let isRemove = false;\n            let isChange = false;\n\n            guides = [...guides];\n\n            if (guidePos < this.scrollPos) {\n                if (lockGuides && (lockGuides === true || lockGuides.indexOf('remove') > -1)) {\n                    return;\n                }\n                const deletedPosGuide = guides[index];\n                guides.splice(index, 1);\n                this.props.onDeleteGuide!({\n                    deletedIndexGuide: index,\n                    deletedPosGuide,\n                });\n                isRemove = true;\n            } else if (guides.indexOf(guidePos) > -1) {\n                return;\n            } else {\n                if (lockGuides && (lockGuides === true || lockGuides.indexOf('change') > -1)) {\n                    return;\n                }\n                guides[index] = guidePos;\n                isChange = true;\n            }\n            this.setState({\n                guides,\n            }, () => {\n                const nextGuides = this.state.guides;\n                onChangeGuides!({\n                    distX,\n                    distY,\n                    guides: nextGuides,\n                    isAdd: false,\n                    isChange,\n                    isRemove,\n                });\n            });\n        }\n    }\n    private movePos(e: any) {\n        const { datas, distX, distY } = e;\n        const props = this.props;\n        const {\n            type, zoom, snaps, snapThreshold,\n            displayDragPos,\n            digit,\n        } = props;\n        const dragPosFormat = props.dragPosFormat || (v => v);\n        const isHorizontal = type === 'horizontal';\n        const matrixPos = calculateMatrixDist(datas.matrix, [distX, distY]);\n        const offsetPos = datas.offsetPos;\n        const offsetX = matrixPos[0] + offsetPos[0];\n        const offsetY = matrixPos[1] + offsetPos[1];\n        let nextPos = Math.round(isHorizontal ? offsetY : offsetX);\n        let guidePos = parseFloat((nextPos / zoom!).toFixed(digit || 0));\n        const guideSnaps = snaps!.slice().sort((a, b) => {\n            return Math.abs(guidePos - a) - Math.abs(guidePos - b);\n        });\n\n        if (guideSnaps.length && Math.abs(guideSnaps[0] * zoom! - nextPos) < snapThreshold!) {\n            guidePos = guideSnaps[0];\n            nextPos = guidePos * zoom!;\n        }\n        if (!datas.fromRuler || !this._isFirstMove) {\n            if (displayDragPos) {\n                const displayPos = type === 'horizontal'\n                    ? [offsetX, nextPos]\n                    : [nextPos, offsetY];\n                this.displayElement.style.cssText += 'display: block;'\n                    + 'transform: translate(-50%, -50%) '\n                    + `translate(${displayPos.map(v => `${v}px`).join(', ')})`;\n                this.displayElement.innerHTML = `${dragPosFormat!(guidePos)}`;\n            }\n            const target = datas.target;\n\n            target.setAttribute('data-pos', guidePos);\n            target.style.transform = `${this.getTranslateName()}(${nextPos}px)`;\n        }\n\n        return nextPos;\n\n    }\n    private getTranslateName() {\n        return this.props.type === 'horizontal' ? 'translateY' : 'translateX';\n    }\n\n    public resetSelected() {\n        this.setState({\n            selectedGuides:[],\n        });\n    }\n}\n","import { ref } from 'framework-utils';\nimport * as React from 'react';\nimport { createPortal } from 'react-dom';\n\nimport ReactGuides from './react-guides';\nimport { GuidesOptions } from './react-guides/types';\n\nexport interface InnerGuidesProps extends GuidesOptions {\n    container?: HTMLElement;\n}\nexport default class InnerGuides extends React.Component<InnerGuidesProps, InnerGuidesProps> {\n    public state: InnerGuidesProps = {};\n    public guides: ReactGuides;\n    constructor(props: InnerGuidesProps) {\n        super(props);\n        this.state = this.props;\n    }\n    public render() {\n        const { container, ...state } = this.state;\n        return createPortal(<ReactGuides ref={ref(this, 'guides')} {...state} />, container);\n    }\n}\n","import GuidesManager from './GuidesManager';\n\nexport * from './react-guides/types';\nexport default class Guides extends GuidesManager {}\n\n","import { camelize } from '@daybrush/utils';\nimport EventEmitter from '@scena/event-emitter';\nimport { Properties,ref } from 'framework-utils';\nimport * as React from 'react';\nimport { render } from 'react-dom';\n\nimport InnerGuides from './InnerGuides';\nimport { EVENTS,METHODS, PROPERTIES } from './react-guides/consts';\nimport { GuidesEvents, GuidesInterface, GuidesOptions } from './react-guides/types';\n\n@Properties(METHODS as any, (prototype, property) => {\n    if (prototype[property]) {\n        return;\n    }\n    prototype[property] = function(...args) {\n        const self = this.getInnerGuides();\n\n        if (!self || !self[property]) {\n            return;\n        }\n        return self[property](...args);\n    };\n})\n@Properties(PROPERTIES, (prototype, property) => {\n    Object.defineProperty(prototype, property, {\n        get() {\n            return this.getInnerGuides().props[property];\n        },\n        set(value) {\n            this.innerGuides.setState({\n                [property]: value,\n            });\n        },\n        enumerable: true,\n        configurable: true,\n    });\n})\n/**\n * @sort 1\n * @extends EventEmitter\n */\nclass Guides extends EventEmitter<GuidesEvents> {\n    private tempElement = document.createElement('div');\n    private innerGuides!: InnerGuides;\n    /**\n     * @sort 1\n     * @param - guides' container\n     * @param {$ts:Partial<Guides.GuidesOptions>} - guides' options\n     */\n    constructor(container: HTMLElement, options: Partial<GuidesOptions> = {}) {\n        super();\n        const events: any = {};\n\n        EVENTS.forEach(name => {\n            events[camelize(`on ${name}`)] = (e: any) => this.trigger(name as any, e);\n        });\n\n        render(\n            <InnerGuides  {...options} {...events} container={container} ref={ref(this, 'innerGuides')} />,\n            this.tempElement,\n        );\n    }\n    /**\n     * @param state\n     * @param callback\n     */\n    public setState(state: Partial<GuidesOptions>, callback?: () => void) {\n        this.innerGuides.setState(state, callback);\n    }\n    /**\n     * destroy guides\n     */\n    public destroy() {\n        render(null, this.tempElement);\n        this.tempElement = null;\n        this.innerGuides = null;\n    }\n    private getInnerGuides() {\n        return this.innerGuides.guides;\n    }\n}\ninterface Guides extends GuidesInterface {}\n\nexport default Guides;\n"],"names":["prefix","_i","classNames","ADDER","GUIDES","GUIDE","DRAGGING","DISPLAY_DRAG","GUIDES_CSS","PROPERTIES","RULER_PROPERTIES","METHODS","EVENTS","GuidesElement","props","_super","_this","guides","selectedGuides","e","datas","inputEvent","_isFirstMove","movePos","onDragStart","dragElement","target","stopPropagation","preventDefault","nextPos","onDrag","distX","distY","pos","state","_a","onChangeGuides","onAddGuide","zoom","displayDragPos","digit","lockGuides","guidePos","parseFloat","toFixed","displayElement","style","cssText","onDragEnd","fromRuler","onClickRuler","scrollPos","indexOf","setState","isAdd","isRemove","isChange","posNewGuide","index","getAttribute","isRemove_1","isChange_1","deletedPosGuide","splice","onDeleteGuide","deletedIndexGuide","nextGuides","window","addEventListener","code","length","deleteSelectedGuide","resetSelected","__extends","className","type","rulerStyle","cspNonce","dragGuideStyle","portalContainer","this","translateName","getTranslateName","rulerProps","forEach","name","React","ref","Ruler","transform","renderGuides","onResetGuides","showGuides","guideStyle","displayGuidePos","_b","guidePosStyle","guidePosFormat","dragPosFormat","v","guideElements","map","i","includes","key","onClick","selectGuide","gesto","Gesto","manager","getElement","container","document","body","on","stop","canvasElement","ruler","guidesElement","isHorizontal","originRect","originElement","getBoundingClientRect","matrix","getDistElementMatrix","offsetPos","calculateMatrixDist","clientX","left","clientY","top","isLockAdd","offsetLeft","offsetTop","isLockRemove","isLockChange","adderElement","defaultGuides","unset","prevProps","getGuides","findIndex","guide","el","display","resize","scroll","snaps","snapThreshold","matrixPos","offsetX","offsetY","Math","round","guideSnaps","slice","sort","a","b","abs","join","innerHTML","setAttribute","Guides","ReactGuides","options","events","createElement","trigger","render","InnerGuides","tempElement","callback","innerGuides","Properties","prototype","property","args","self","getInnerGuides","Object","defineProperty","get","set","value","enumerable","configurable","EventEmitter"],"mappings":"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"}