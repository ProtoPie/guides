{"version":3,"file":"guides.min.js","sources":["../src/react-guides/utils.ts","../src/react-guides/consts.ts","../src/react-guides/Guides.tsx","../src/InnerGuides.tsx","../src/index.ts","../src/GuidesManager.tsx"],"sourcesContent":["import { prefixNames } from 'framework-utils';\n\nexport function prefix(...classNames: string[]) {\n    return prefixNames('scena-', ...classNames);\n}\n","import { PROPERTIES as RULER_PROPERTIES } from '@scena/react-ruler';\nimport { prefixCSS } from 'framework-utils';\n\nimport { GuidesOptions } from './types';\nimport { prefix } from './utils';\n\nexport const RULER = prefix('ruler');\nexport const ADDER = prefix('guide', 'adder');\nexport const GUIDES = prefix('guides');\nexport const GUIDE = prefix('guide');\nexport const DRAGGING = prefix('dragging');\nexport const DISPLAY_DRAG = prefix('display-drag');\nexport const GUIDES_CSS = prefixCSS('scena-', `\n{\n    position: relative;\n    width: 100%;\n    height: 100%;\n}\ncanvas {\n    position: relative;\n}\n.guide-origin {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    top: 0;\n    left: 0;\n    opacity: 0;\n}\n.guides {\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    will-change: transform;\n    z-index: 2000;\n}\n.guide-pos {\n    position: absolute;\n    font-weight: bold;\n    font-size: 12px;\n    color: #f33;\n}\n.horizontal .guide-pos {\n    bottom: 100%;\n    left: 50%;\n    transform: translate(-50%);\n}\n.vertical .guide-pos {\n    left: calc(100% + 2px);\n    top: 50%;\n    transform: translateY(-50%);\n}\n.display-drag {\n    position: absolute;\n    will-change: transform;\n    z-index: 2000;\n    font-weight: bold;\n    font-size: 12px;\n    display: none;\n    left: 20px;\n    top: -20px;\n    color: #f33;\n}\n:host.horizontal .guides {\n    width: 100%;\n    height: 0;\n}\n:host.vertical .guides {\n    height: 100%;\n    width: 0;\n}\n.guide {\n    position: absolute;\n    background: #f33;\n    z-index: 2;\n}\n.selected {\n    background: #8169FF;\n}\n.guide.dragging:before {\n    position: absolute;\n    content: \"\";\n    width: 100%;\n    height: 100%;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n}\n:host.horizontal .guide {\n    width: 100%;\n    height: 1px;\n    cursor: row-resize;\n}\n:host.vertical .guide {\n    width: 1px;\n    height: 100%;\n    cursor: col-resize;\n}\n:host.horizontal .dragging,\n:host.horizontal .selected {\n    height: 2px\n}\n:host.vertical .dragging,\n:host.vertical .selected {\n    width: 2px\n}\n.mobile :host.horizontal .guide {\n    transform: scale(1, 2);\n}\n.mobile :host.vertical .guide {\n    transform: scale(2, 1);\n}\n:host.horizontal .guide:before {\n    height: 10px;\n    margin-top: -5px;\n    display: block;\n    content: '';\n}\n:host.vertical .guide:before {\n    width: 10px;\n    height: 100%;\n    margin-left: -5px;\n    display: block;\n    content: '';\n}\n.adder {\n    display: none;\n}\n.adder.dragging {\n    display: block;\n}\n`);\n\nexport const PROPERTIES: Array<keyof GuidesOptions> = [\n    'className',\n    'rulerStyle',\n    'snapThreshold',\n    'snaps',\n    'displayDragPos',\n    'cspNonce',\n    'dragPosFormat',\n    'defaultGuides',\n    'showGuides',\n    ...RULER_PROPERTIES,\n];\n\nexport const METHODS = [\n    'getGuides',\n    'loadGuides',\n    'scroll',\n    'scrollGuides',\n    'resize',\n    'deleteSelectedGuide',\n    'resetSelected',\n    'clearAllGuides',\n] as const;\n\nexport const EVENTS = [\n    'changeGuides',\n    'dragStart',\n    'drag',\n    'dragEnd',\n    'clickRuler',\n    'deleteGuide',\n    'addGuide',\n    'resetGuides',\n] as const;\n","import { addClass, hasClass, removeClass } from '@daybrush/utils';\nimport Ruler, { PROPERTIES as RULER_PROPERTIES, RulerProps } from '@scena/react-ruler';\nimport { calculateMatrixDist,getDistElementMatrix } from 'css-to-mat';\nimport { ref, refs } from 'framework-utils';\nimport Gesto, { OnDragEnd } from 'gesto';\nimport * as React from 'react';\nimport styled, { StyledElement } from 'react-css-styled';\n\nimport { ADDER, DISPLAY_DRAG, DRAGGING, GUIDE, GUIDES, GUIDES_CSS } from './consts';\nimport { GuidesInterface,GuidesProps, GuidesState, OnDragStart } from './types';\nimport { prefix } from './utils';\n\nconst GuidesElement = styled('div', GUIDES_CSS);\n\nexport default class Guides extends React.PureComponent<GuidesProps, GuidesState> implements GuidesInterface {\n    public static defaultProps: GuidesProps = {\n        className: '',\n        type: 'horizontal',\n        zoom: 1,\n        style: {},\n        snapThreshold: 5,\n        snaps: [],\n        digit: 0,\n        onClickRuler: () => { },\n        onAddGuide: () => { },        \n        onDeleteGuide: () => { },\n        onChangeGuides: () => { },\n        onDragStart: () => { },\n        onDrag: () => { },\n        onDragEnd: () => { },\n        displayDragPos: false,\n        dragPosFormat: v => v,\n        defaultGuides: [],\n        lockGuides: false,\n        showGuides: true,\n        guideStyle: {},\n        dragGuideStyle: {},\n        guidePosStyle: {},\n        portalContainer: null,\n    };\n    public state: GuidesState = {\n        guides: [],\n        selectedGuides: [],\n    };\n    public adderElement!: HTMLElement;\n    public scrollPos = 0;\n    public ruler!: Ruler;\n    private manager!: StyledElement<HTMLElement>;\n    private guidesElement!: HTMLElement;\n    private displayElement!: HTMLElement;\n    private originElement!: HTMLElement;\n    private gesto!: Gesto;\n    private guideElements: HTMLElement[] = [];\n    private _isFirstMove = false;\n    private _pointerEventsTimer: NodeJS.Timeout;\n\n    constructor(props: Required<GuidesProps>) {\n        super(props);\n        window.addEventListener('keydown', (e: KeyboardEvent) => {\n            if(e.code === 'Backspace' && this.state.selectedGuides.length) {\n                this.deleteSelectedGuide();\n            }\n        });\n\n        window.addEventListener('click', (e: MouseEvent) => {\n            this.resetSelected();\n            e.stopPropagation();\n        });\n    }\n\n    public disablePointerEventsOnScroll() {\n        if(!this.props?.showGuides) {\n            return;\n        }\n        this._pointerEventsTimer && clearTimeout(this._pointerEventsTimer);\n        this.guidesElement.style.pointerEvents = 'none';\n        this._pointerEventsTimer = setTimeout(() => {\n            this.guidesElement.style.pointerEvents = 'auto';\n        }, 300);\n    }\n\n    public render() {\n        const {\n            className,\n            type,\n            zoom,\n            style,\n            rulerStyle,\n            displayDragPos,\n            cspNonce,\n            dragGuideStyle,\n            portalContainer,\n        } = this.props as Required<GuidesProps>;\n        const props = this.props;\n        const translateName = this.getTranslateName();\n\n        const rulerProps: RulerProps = {};\n\n        RULER_PROPERTIES.forEach(name => {\n            if (name === 'style') {\n                return;\n            }\n            (rulerProps as any)[name] = props[name];\n        });\n        return <GuidesElement\n            ref={ref(this, 'manager')}\n            cspNonce={cspNonce}\n            className={`${prefix('manager', type)} ${className}`}\n            portalContainer={portalContainer}\n            style={style}\n        >\n            <div className={prefix('guide-origin')} ref={ref(this, 'originElement')}></div>\n            <Ruler\n                ref={ref(this, 'ruler')}\n                style={rulerStyle}\n                {...rulerProps}\n            />\n            <div className={GUIDES} ref={ref(this, 'guidesElement')} style={{\n                transform: `${translateName}(${-this.scrollPos * zoom}px)`,\n            }}>\n                {displayDragPos && <div className={DISPLAY_DRAG}\n                    ref={ref(this, 'displayElement')} style={dragGuideStyle} />}\n                <div className={ADDER} ref={ref(this, 'adderElement')} />\n                {this.renderGuides()}\n            </div>\n        </GuidesElement>;\n    }\n\n    private selectGuide(pos: number, e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n        // we should detect if the last event was dragging event\n        // in such case we don't wan't to make guide selected\n        if (!this.gesto.isDragging()) {\n            this.setState({\n                selectedGuides: [pos],\n            });\n        }\n        e.stopPropagation();\n        e.preventDefault();\n    }\n\n    public renderGuides() {\n        const props = this.props;\n        const {\n            type,\n            zoom,\n            showGuides,\n            guideStyle,\n            displayGuidePos,\n            guidePosStyle = {},\n        } = props as Required<GuidesProps>;\n        const translateName = this.getTranslateName();\n        const guides = this.state.guides;\n        const guidePosFormat = props.guidePosFormat || props.dragPosFormat || (v => v);\n        const selectedGuides = this.state.selectedGuides;\n        this.guideElements = [];\n        if (showGuides) {\n            return guides.map((pos, i) => {\n                return (\n                    <div className={`${prefix('guide', type)} ${selectedGuides.includes(pos) ? prefix('selected') : ''}`}\n                        ref={refs(this, 'guideElements', i)}\n                        key={i}\n                        data-index={i}\n                        data-pos={pos}\n                        onClick={(e) => this.selectGuide(pos, e)}\n                        style={{\n                            ...guideStyle,\n                            transform: `${translateName}(${pos * zoom}px) translateZ(0px)`,\n                        }}>\n                            {displayGuidePos && <div className={prefix('guide-pos')} style={guidePosStyle || {}}>\n                                {guidePosFormat!(pos)}\n                            </div>}\n                        </div>\n                    );\n            });\n        }\n        return;\n    }\n    public componentDidMount() {\n        this.gesto = new Gesto(this.manager.getElement(), {\n            container: document.body,\n        }).on('dragStart', e => {\n            const {\n                type,\n                zoom,\n                lockGuides,\n            } = this.props;\n\n            if (lockGuides === true) {\n                e.stop();\n                return;\n            }\n            const inputEvent = e.inputEvent;\n            const target = inputEvent.target;\n            const datas = e.datas;\n            const canvasElement = this.ruler.canvasElement;\n            const guidesElement = this.guidesElement;\n            const isHorizontal = type === 'horizontal';\n            const originRect = this.originElement.getBoundingClientRect();\n            const matrix = getDistElementMatrix(this.manager.getElement());\n            const offsetPos = calculateMatrixDist(matrix, [\n                e.clientX - originRect.left,\n                e.clientY - originRect.top,\n            ]);\n            offsetPos[0] -= guidesElement.offsetLeft;\n            offsetPos[1] -= guidesElement.offsetTop;\n            offsetPos[isHorizontal ? 1 : 0] += this.scrollPos * zoom!;\n\n            datas.offsetPos = offsetPos;\n            datas.matrix = matrix;\n\n            const isLockAdd = lockGuides && lockGuides.indexOf('add') > -1;\n            const isLockRemove = lockGuides && lockGuides.indexOf('remove') > -1;\n            const isLockChange = lockGuides && lockGuides.indexOf('change') > -1;\n\n            if (target === canvasElement) {\n                if (isLockAdd) {\n                    e.stop();\n                    return;\n                }\n                datas.fromRuler = true;\n                datas.target = this.adderElement;\n                // add\n            } else if (hasClass(target, GUIDE)) {\n                if (isLockRemove && isLockChange) {\n                    e.stop();\n                    return;\n                }\n                datas.target = target;\n                // change\n            } else {\n                e.stop();\n                return false;\n            }\n            this.onDragStart(e as OnDragStart);\n        }).on('drag', this.onDrag).on('dragEnd', this.onDragEnd);\n        // pass array of guides on mount data to create gridlines or something like that in ui\n        this.setState({ guides: this.props.defaultGuides || [] });\n    }\n    public componentWillUnmount() {\n        this.gesto.unset();\n    }\n    public componentDidUpdate(prevProps: any) {\n        if (prevProps.defaultGuides !== this.props.defaultGuides) {\n            // to dynamically update guides from code rather than dragging guidelines\n            this.setState({ guides: this.props.defaultGuides || [] });\n        }\n    }\n    /**\n     * Load the current guidelines.\n     * @memberof Guides\n     * @instance\n     */\n    public loadGuides(guides: number[]) {\n        this.setState({\n            guides,\n        });\n    }\n\n    /**\n     * Delete the selected guideline.\n     * @memberof Guides\n     * @instance\n     */\n    public deleteSelectedGuide() {\n        const guides = this.getGuides();\n        const guidesClone = this.getGuides();\n        const index = guides.findIndex(guide => {\n            if(this.state.selectedGuides.includes(guide)) {\n                return guide;\n            }\n        });\n\n        guides.splice(index, 1);\n        \n        this.setState({\n            guides,\n            selectedGuides: [],\n        });\n        \n        this.props.onDeleteGuide!({\n            deletedPosGuide: guidesClone[index],\n            deletedIndexGuide: index,\n        });\n    }\n\n    /**\n     * Clear all guidelines\n     * @memberof Guides\n     * @instance\n     */\n    public clearAllGuides() {\n        this.setState({\n            guides: [],\n        });\n    }\n\n    /**\n     * Get current guidelines.\n     * @memberof Guides\n     * @instance\n     */\n    public getGuides(): number[] {\n        return this.state.guides;\n    }\n    /**\n     * Scroll the positions of the guidelines opposite the ruler.\n     * @memberof Guides\n     * @instance\n     */\n    public scrollGuides(pos: number, zoom = 1) {\n        const guidesElement = this.guidesElement;\n\n        this.disablePointerEventsOnScroll();\n\n        this.scrollPos = pos;\n        guidesElement.style.transform = `${this.getTranslateName()}(${-pos * zoom}px)`;\n\n        const guides = this.state.guides;\n        this.guideElements.forEach((el, i) => {\n            if (!el) {\n                return;\n            }\n            el.style.display = -pos + guides[i] < 0 ? 'none' : 'block';\n        });\n    }\n    /**\n     * Recalculate the size of the ruler.\n     * @memberof Guides\n     * @instance\n     */\n    public resize() {\n        this.ruler.resize();\n    }\n    /**\n     * Scroll the position of the ruler.\n     * @memberof Guides\n     * @instance\n     */\n    public scroll(pos: number) {\n        this.ruler.scroll(pos);\n    }\n\n    private onDragStart = (e: OnDragStart) => {\n        this.resetSelected();\n        this.props.onDragStart(e);\n        this._isFirstMove = true;\n    }\n\n    private onDrag = (e: any) => { \n        if (this._isFirstMove) {\n            this._isFirstMove = false;\n            addClass(e.datas.target, DRAGGING);\n        }\n        const nextPos = this.movePos(e);\n\n        /**\n         * When dragging, the drag event is called.\n         * @memberof Guides\n         * @event drag\n         * @param {OnDrag} - Parameters for the drag event\n         */\n        this.props.onDrag!({\n            ...e,\n            dragElement: e.datas.target,\n        });\n        return nextPos;\n    }\n    private onDragEnd = (e: OnDragEnd) => {\n        const { datas, isDrag, distX, distY } = e;\n\n        if(!isDrag) {\n            return;\n        }\n\n        const pos = this.movePos(e);\n        let guides = this.state.guides;\n        const { onChangeGuides, onAddGuide, zoom, displayDragPos, digit, lockGuides } = this.props;\n        const guidePos = parseFloat((pos / zoom!).toFixed(digit || 0));\n\n        if (displayDragPos) {\n            this.displayElement.style.cssText += 'display: none;';\n        }\n\n        removeClass(datas.target, DRAGGING);\n\n        if (datas.fromRuler) {\n            if (this._isFirstMove) {\n                /**\n                 * When click the ruler, the click ruler is called.\n                 * @memberof Guides\n                 * @event clickRuler\n                 * @param {OnClickRuler} - Parameters for the clickRuler event\n                 */\n                this.props.onClickRuler!({\n                    ...e,\n                    pos: 0,\n                });\n            }\n            if (guidePos >= this.scrollPos && guides.indexOf(guidePos) < 0) {\n                this.setState({\n                    guides: [...guides, guidePos],\n                }, () => {\n                    /**\n                     * The `changeGuides` event occurs when the guideline is added / removed / changed.\n                     * @memberof Guides\n                     * @event changeGuides\n                     * @param {OnChangeGuides} - Parameters for the changeGuides event\n                     */\n                    onChangeGuides!({\n                        guides: this.state.guides,\n                        distX,\n                        distY,\n                        isAdd: true,\n                        isRemove: false,\n                        isChange: false,\n                    });\n\n                    onAddGuide!({\n                        posNewGuide: guidePos,\n                    });\n                });\n            }\n        } else {\n            const index = datas.target.getAttribute('data-index');\n            let isRemove = false;\n            let isChange = false;\n\n            guides = [...guides];\n\n            if (guidePos < this.scrollPos) {\n                if (lockGuides && (lockGuides === true || lockGuides.indexOf('remove') > -1)) {\n                    return;\n                }\n                const deletedPosGuide = guides[index];\n                guides.splice(index, 1);\n                this.props.onDeleteGuide!({\n                    deletedIndexGuide: index,\n                    deletedPosGuide,\n                });\n                isRemove = true;\n            } else if (guides.indexOf(guidePos) > -1) {\n                return;\n            } else {\n                if (lockGuides && (lockGuides === true || lockGuides.indexOf('change') > -1)) {\n                    return;\n                }\n                guides[index] = guidePos;\n                isChange = true;\n            }\n            this.setState({\n                guides,\n            }, () => {\n                const nextGuides = this.state.guides;\n                onChangeGuides!({\n                    distX,\n                    distY,\n                    guides: nextGuides,\n                    isAdd: false,\n                    isChange,\n                    isRemove,\n                });\n            });\n        }\n\n        this.props.onDragEnd!({\n            ...e,\n            dragElement: datas.target,\n        });\n\n        console.log(this.gesto.getCurrentEvent());\n    }\n    private movePos(e: any) {\n        const { datas, distX, distY } = e;\n        const props = this.props;\n        const {\n            type, zoom, snaps, snapThreshold,\n            displayDragPos,\n            digit,\n        } = props;\n        const dragPosFormat = props.dragPosFormat || (v => v);\n        const isHorizontal = type === 'horizontal';\n        const matrixPos = calculateMatrixDist(datas.matrix, [distX, distY]);\n        const offsetPos = datas.offsetPos;\n        const offsetX = matrixPos[0] + offsetPos[0];\n        const offsetY = matrixPos[1] + offsetPos[1];\n        let nextPos = Math.round(isHorizontal ? offsetY : offsetX);\n        let guidePos = parseFloat((nextPos / zoom!).toFixed(digit || 0));\n        const guideSnaps = snaps!.slice().sort((a, b) => {\n            return Math.abs(guidePos - a) - Math.abs(guidePos - b);\n        });\n\n        if (guideSnaps.length && Math.abs(guideSnaps[0] * zoom! - nextPos) < snapThreshold!) {\n            guidePos = guideSnaps[0];\n            nextPos = guidePos * zoom!;\n        }\n        if (!datas.fromRuler || !this._isFirstMove) {\n            if (displayDragPos) {\n                const displayPos = type === 'horizontal'\n                    ? [offsetX, nextPos]\n                    : [nextPos, offsetY];\n                this.displayElement.style.cssText += 'display: block;'\n                    + 'transform: translate(-50%, -50%) '\n                    + `translate(${displayPos.map(v => `${v}px`).join(', ')})`;\n                this.displayElement.innerHTML = `${dragPosFormat!(guidePos)}`;\n            }\n            const target = datas.target;\n\n            target.setAttribute('data-pos', guidePos);\n            target.style.transform = `${this.getTranslateName()}(${nextPos}px)`;\n        }\n\n        return nextPos;\n\n    }\n    private getTranslateName() {\n        return this.props.type === 'horizontal' ? 'translateY' : 'translateX';\n    }\n\n    public resetSelected() {\n        this.setState({\n            selectedGuides:[],\n        });\n    }\n}\n","import { ref } from 'framework-utils';\nimport * as React from 'react';\nimport { createPortal } from 'react-dom';\n\nimport ReactGuides from './react-guides';\nimport { GuidesOptions } from './react-guides/types';\n\nexport interface InnerGuidesProps extends GuidesOptions {\n    container?: HTMLElement;\n}\nexport default class InnerGuides extends React.Component<InnerGuidesProps, InnerGuidesProps> {\n    public state: InnerGuidesProps = {};\n    public guides: ReactGuides;\n    constructor(props: InnerGuidesProps) {\n        super(props);\n        this.state = { ...props };\n    }\n    public render() {\n        const { container, ...state } = this.state;\n        return createPortal(<ReactGuides ref={ref(this, 'guides')} {...state} />, container);\n    }\n}\n","import GuidesManager from './GuidesManager';\n\nexport * from './react-guides/types';\nexport default class Guides extends GuidesManager {}\n\n","import { camelize } from '@daybrush/utils';\nimport EventEmitter from '@scena/event-emitter';\nimport { Properties,ref } from 'framework-utils';\nimport * as React from 'react';\nimport { render } from 'react-dom';\n\nimport InnerGuides from './InnerGuides';\nimport { EVENTS,METHODS, PROPERTIES } from './react-guides/consts';\nimport { GuidesEvents, GuidesInterface, GuidesOptions } from './react-guides/types';\n\n@Properties(METHODS as any, (prototype, property) => {\n    if (prototype[property]) {\n        return;\n    }\n    prototype[property] = function(...args) {\n        const self = this.getInnerGuides();\n\n        if (!self || !self[property]) {\n            return;\n        }\n        return self[property](...args);\n    };\n})\n@Properties(PROPERTIES, (prototype, property) => {\n    Object.defineProperty(prototype, property, {\n        get() {\n            return this.getInnerGuides().props[property];\n        },\n        set(value) {\n            this.innerGuides.setState({\n                [property]: value,\n            });\n        },\n        enumerable: true,\n        configurable: true,\n    });\n})\n/**\n * @sort 1\n * @extends EventEmitter\n */\nclass Guides extends EventEmitter<GuidesEvents> {\n    private tempElement = document.createElement('div');\n    private innerGuides!: InnerGuides;\n    /**\n     * @sort 1\n     * @param - guides' container\n     * @param {$ts:Partial<Guides.GuidesOptions>} - guides' options\n     */\n    constructor(container: HTMLElement, options: Partial<GuidesOptions> = {}) {\n        super();\n        const events: any = {};\n\n        EVENTS.forEach(name => {\n            events[camelize(`on ${name}`)] = (e: any) => this.trigger(name as any, e);\n        });\n\n        render(\n            <InnerGuides  {...options} {...events} container={container} ref={ref(this, 'innerGuides')} />,\n            this.tempElement,\n        );\n    }\n    /**\n     * @param state\n     * @param callback\n     */\n    public setState(state: Partial<GuidesOptions>, callback?: () => void) {\n        this.innerGuides.setState(state, callback);\n    }\n    /**\n     * destroy guides\n     */\n    public destroy() {\n        render(null, this.tempElement);\n        this.tempElement = null;\n        this.innerGuides = null;\n    }\n    private getInnerGuides() {\n        return this.innerGuides.guides;\n    }\n}\ninterface Guides extends GuidesInterface {}\n\nexport default Guides;\n"],"names":["prefix","_i","classNames","ADDER","GUIDES","GUIDE","DRAGGING","DISPLAY_DRAG","GUIDES_CSS","PROPERTIES","RULER_PROPERTIES","METHODS","EVENTS","GuidesElement","props","_super","_this","guides","selectedGuides","e","resetSelected","onDragStart","_isFirstMove","datas","target","nextPos","movePos","onDrag","dragElement","isDrag","distX","distY","pos","state","_a","onChangeGuides","onAddGuide","zoom","displayDragPos","digit","lockGuides","guidePos","parseFloat","toFixed","displayElement","style","cssText","fromRuler","onClickRuler","scrollPos","indexOf","setState","isAdd","isRemove","isChange","posNewGuide","index","getAttribute","isRemove_1","isChange_1","deletedPosGuide","splice","onDeleteGuide","deletedIndexGuide","nextGuides","onDragEnd","console","log","gesto","getCurrentEvent","window","addEventListener","code","length","deleteSelectedGuide","stopPropagation","__extends","__proto","this","showGuides","_pointerEventsTimer","clearTimeout","guidesElement","pointerEvents","setTimeout","className","type","rulerStyle","cspNonce","dragGuideStyle","portalContainer","translateName","getTranslateName","rulerProps","forEach","name","React","ref","Ruler","transform","renderGuides","isDragging","preventDefault","guideStyle","displayGuidePos","_b","guidePosStyle","guidePosFormat","dragPosFormat","v","guideElements","map","i","includes","key","onClick","selectGuide","Gesto","manager","getElement","container","document","body","on","stop","inputEvent","canvasElement","ruler","isHorizontal","originRect","originElement","getBoundingClientRect","matrix","getDistElementMatrix","offsetPos","calculateMatrixDist","clientX","left","clientY","top","isLockAdd","offsetLeft","offsetTop","isLockRemove","isLockChange","adderElement","defaultGuides","unset","prevProps","getGuides","guidesClone","findIndex","guide","disablePointerEventsOnScroll","el","display","resize","scroll","snaps","snapThreshold","matrixPos","offsetX","offsetY","Math","round","guideSnaps","slice","sort","a","b","abs","join","innerHTML","setAttribute","Guides","createPortal","ReactGuides","options","events","createElement","trigger","render","InnerGuides","tempElement","callback","innerGuides","Properties","prototype","property","args","self","getInnerGuides","Object","defineProperty","get","set","value","enumerable","configurable","EventEmitter"],"mappings":"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"}